#!/usr/bin/env bash
set -euo pipefail

handle_error() {
  echo "Error: Script failed at line $1" >&2
  echo "Command: $2" >&2
  echo "Current function: ${FUNCNAME[1]:-main}" >&2
  exit 1
}
trap 'handle_error $LINENO "$BASH_COMMAND"' ERR

readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_VERSION="0.1"
readonly ULIMIT_PROCESSES=1024
readonly PROFILE_VERSION="1"

log() { 
  if [[ ${VERBOSE:-0} -eq 1 ]]; then 
    echo "DEBUG: $*" >&2
  fi
  return 0
}
error() { echo "Error: $*" >&2; }
warn() { echo "Warning: $*" >&2; }

TMPDIR="${TMPDIR:-/tmp}"
TMPDIR="${TMPDIR%/}"
VERBOSE="${CLAUDEBOX_VERBOSE:-0}"
DRY_RUN="${CLAUDEBOX_DRY_RUN:-0}"
CONFIG_FILE="${CLAUDEBOX_CONFIG:-$HOME/.claudeboxrc}"
PRESERVE_PROFILE=0

[[ $VERBOSE -eq 1 ]] && echo "DEBUG: Starting claudebox v$SCRIPT_VERSION" >&2
[[ $VERBOSE -eq 1 ]] && echo "DEBUG: CONFIG_FILE=$CONFIG_FILE" >&2
[[ $VERBOSE -eq 1 ]] && echo "DEBUG: TMPDIR=$TMPDIR" >&2

if ! PROJECT_DIR="$(pwd -P)"; then
  echo "Error: Cannot determine current directory" >&2
  exit 1
fi

PROJECT_NAME="$(basename "$PROJECT_DIR")"
if ! CKSUM_OUTPUT="$(echo "$PROJECT_DIR" | cksum 2>/dev/null)"; then
  error "Failed to generate checksum for project directory"
  exit 1
fi
CKSUM_FIRST="$(echo "$CKSUM_OUTPUT" | cut -d' ' -f1 2>/dev/null)"
if [[ -z "$CKSUM_FIRST" || ! "$CKSUM_FIRST" =~ ^[0-9]+$ ]]; then
  error "Invalid checksum output: '$CKSUM_OUTPUT'"
  exit 1
fi
PROJECT_HASH="$(printf "%x" "$CKSUM_FIRST" 2>/dev/null)"
if [[ -z "$PROJECT_HASH" ]]; then
  error "Failed to convert checksum to hex"
  exit 1
fi
PROFILE_NAME="claudebox-${PROJECT_NAME}-${PROJECT_HASH}"
PROFILE_FILE="$TMPDIR/$PROFILE_NAME.sb"

[[ $VERBOSE -eq 1 ]] && echo "DEBUG: Profile will be: $PROFILE_FILE" >&2

cleanup() {
  set +e
  [[ $PRESERVE_PROFILE -eq 0 && -f "$PROFILE_FILE" ]] && rm -f "$PROFILE_FILE"
  set -e
}
trap cleanup EXIT

load_config() {
  log "Checking for config file: $CONFIG_FILE"
  set +e
  if [[ -f "$CONFIG_FILE" ]]; then
    log "Loading config from $CONFIG_FILE"
    source "$CONFIG_FILE"
    local source_result=$?
    if [[ $source_result -ne 0 ]]; then
      warn "Failed to load config file $CONFIG_FILE (exit code: $source_result)"
    fi
  else
    log "No config file found at $CONFIG_FILE"
  fi
  set -e
}

validate_environment() {
  if ! command -v sandbox-exec >/dev/null 2>&1; then
    error "sandbox-exec not found. This tool requires macOS with sandbox-exec."
    exit 1
  fi

  log "Testing writability of TMPDIR: $TMPDIR"
  if ! touch "$TMPDIR/.claudebox-test" 2>/dev/null; then
    error "Cannot write to temp directory: $TMPDIR"
    log "ls -ld output: $(ls -ld "$TMPDIR" 2>&1)"
    exit 1
  fi
  rm -f "$TMPDIR/.claudebox-test" 2>/dev/null || true
  log "TMPDIR is writable"

  [[ -r "$(pwd)" ]] || {
    error "Cannot read current directory"
    exit 1
  }

  if ! command -v claude >/dev/null 2>&1; then
    warn "claude command not found in PATH - make sure Claude is installed and accessible"
    [[ $DRY_RUN -eq 0 ]] && warn "Script will attempt to run 'claude' anyway - use CLAUDEBOX_DRY_RUN=1 to test without claude"
  fi

  log "Environment validation passed"
}

usage() { 
  echo "claudebox â€” run claude code inside a macOS sandbox"
  echo
  echo "Copyright (c) 2025 Greitas Kodas <greitaskodas@protonmail.com>"
  echo "License: MIT"
  echo
  echo "Commands:"
  echo "  claudebox                    # generate profile + run claude (default)"
  echo "  claudebox run [...args]      # same, pass args through"
  echo "  claudebox generate           # build the profile only"
  echo "  claudebox profile            # print last-generated profile path"
  echo "  claudebox validate           # validate generated profile"
  echo "  claudebox help               # this text"
  echo
  echo "Environment variables:"
  echo "  CLAUDEBOX_VERBOSE=1          # enable debug output"
  echo "  CLAUDEBOX_DRY_RUN=1          # show what would be done"
  echo "  CLAUDEBOX_CONFIG=path        # custom config file"
  echo
  echo "Examples:"
  echo "  $SCRIPT_NAME                    # run with default settings"
  echo "  $SCRIPT_NAME run --help         # pass args to claude"
  echo "  CLAUDEBOX_VERBOSE=1 $SCRIPT_NAME # debug mode"
  echo "  CLAUDEBOX_DRY_RUN=1 $SCRIPT_NAME # show what would be executed"
  echo
  echo "Version: $SCRIPT_VERSION"
}

detect_package_paths() {
  local cache_file="$TMPDIR/.claudebox-paths-$(whoami)"
  local cache_max_age=3600  # 1 hour
  
  if [[ -f "$cache_file" ]] && [[ $(($(date +%s) - $(stat -f %m "$cache_file" 2>/dev/null || echo 0))) -lt $cache_max_age ]]; then
    log "Using cached package paths"
    cat "$cache_file"
    return
  fi
  
  log "Detecting package manager paths..."
  local paths=()
  
  if [[ -d "/opt/homebrew" ]]; then
    paths+=("/opt/homebrew")
    log "Found Homebrew (ARM): /opt/homebrew"
  elif [[ -d "/usr/local/Homebrew" ]]; then
    paths+=("/usr/local/Homebrew")
    log "Found Homebrew (Intel): /usr/local/Homebrew"
  fi
  
  if [[ -d "$HOME/.local" ]]; then
    paths+=("$HOME/.local")
    log "Found user binaries: $HOME/.local"
  fi
  
  if [[ -d "$HOME/.nvm" ]]; then
    paths+=("$HOME/.nvm")
    log "Found nvm: $HOME/.nvm"
  fi
  
  if [[ -d "$HOME/.fnm" ]]; then
    paths+=("$HOME/.fnm")
    log "Found fnm: $HOME/.fnm"
  fi
  
  if [[ -d "$HOME/.nodenv" ]]; then
    paths+=("$HOME/.nodenv")
    log "Found nodenv: $HOME/.nodenv"
  fi
  
  if [[ -d "/nix/store" ]]; then
    paths+=("/nix/store")
    log "Found Nix: /nix/store"
  fi
  
  if [[ -d "$HOME/.cargo" ]]; then
    paths+=("$HOME/.cargo")
    log "Found Cargo: $HOME/.cargo"
  fi
  
  if [[ -d "$HOME/.rustup" ]]; then
    paths+=("$HOME/.rustup")
    log "Found Rustup: $HOME/.rustup"
  fi
  
  if [[ -d "$HOME/.pyenv" ]]; then
    paths+=("$HOME/.pyenv")
    log "Found pyenv: $HOME/.pyenv"
  fi
  
  if [[ -d "$HOME/.poetry" ]]; then
    paths+=("$HOME/.poetry")
    log "Found Poetry: $HOME/.poetry"
  fi
  
  if [[ -d "$HOME/.pipx" ]]; then
    paths+=("$HOME/.pipx")
    log "Found pipx: $HOME/.pipx"
  fi
  
  if [[ -d "$HOME/miniconda3" ]]; then
    paths+=("$HOME/miniconda3")
    log "Found Miniconda: $HOME/miniconda3"
  elif [[ -d "$HOME/anaconda3" ]]; then
    paths+=("$HOME/anaconda3")
    log "Found Anaconda: $HOME/anaconda3"
  fi
  
  if [[ -d "$HOME/.conda" ]]; then
    paths+=("$HOME/.conda")  
    log "Found Conda config: $HOME/.conda"
  fi
  
  if [[ -d "$HOME/go" ]]; then
    paths+=("$HOME/go")
    log "Found Go workspace: $HOME/go"
  fi
  
  if [[ -d "$HOME/.g" ]]; then
    paths+=("$HOME/.g")
    log "Found g (Go version manager): $HOME/.g"
  fi
  
  if [[ -d "$HOME/.sdkman" ]]; then
    paths+=("$HOME/.sdkman")
    log "Found SDKMAN: $HOME/.sdkman"
  fi
  
  if [[ -d "$HOME/.jenv" ]]; then
    paths+=("$HOME/.jenv")
    log "Found jenv: $HOME/.jenv"
  fi
  
  if [[ -d "$HOME/.rbenv" ]]; then
    paths+=("$HOME/.rbenv")
    log "Found rbenv: $HOME/.rbenv"
  fi
  
  if [[ -d "$HOME/.rvm" ]]; then
    paths+=("$HOME/.rvm")
    log "Found RVM: $HOME/.rvm"
  fi
  
  if [[ -d "$HOME/.deno" ]]; then
    paths+=("$HOME/.deno")
    log "Found Deno: $HOME/.deno"
  fi
  
  if [[ -d "$HOME/.bun" ]]; then
    paths+=("$HOME/.bun")
    log "Found Bun: $HOME/.bun"
  fi
  
  printf '%s\n' "${paths[@]}" | tee "$cache_file"
}

create_base_profile() {
  log "Creating base sandbox profile..."
  cat >"$PROFILE_FILE" <<'EOF'
;; ------------------------------------------------------------------
;;  Claude Code macOS Sandbox Profile (Auto-generated)
;;  Version: v0.1 | Profile Version: 1
;;
;;  SECURITY MODEL:
;;  - Denies all access by default (principle of least privilege)
;;  - Allows only essential system paths and project directory
;;  - Blocks access to sensitive personal directories and credentials
;;  - Permits network access (use external firewall for domain filtering)
;;
;;  APPROVED NETWORK DOMAINS (configure external firewall):
;;  - api.anthropic.com (Claude API)
;;  - registry.npmjs.org (npm packages)
;;  - github.com/api.github.com (Git operations)
;;  - sentry.io (error reporting)
;;  - statsig.anthropic.com/statsig.com (analytics)
;;  - localhost/127.0.0.1 (development servers)
;; ------------------------------------------------------------------
(version 1)
(deny default)

;; ---------- System Introspection & Control ------------------------
;; Allow basic file metadata queries and system configuration reads
(allow file-read-metadata)
(allow sysctl-read)

;; ---------- Basic Directory Traversal ----------------------------
;; Enable filesystem navigation from root and private directories
(allow file-read* (literal "/"))
(allow file-read* (literal "/private"))

;; ---------- System Runtime (Read-Only) ---------------------------
;; Core system paths required for basic operations and library loading
(allow file-read* file-map-executable
  (subpath "/System")               ;; macOS system files
  (subpath "/usr")                  ;; Unix system resources
  (subpath "/bin")                  ;; Essential binaries
  (subpath "/sbin")                 ;; System administration binaries
  (subpath "/Library/Frameworks")   ;; System frameworks
  (subpath "/private/etc")          ;; System configuration
  (subpath "/var/db/dyld")          ;; Dynamic linker cache
__DETECTED_READ_PATHS__
)

;; ---------- Package Manager Binaries (User-Installed) ------------
;; Dynamically detected paths for npm, cargo, pipx, and similar tools
__DETECTED_USER_PATHS__

;; ---------- Executable Paths -------------------------------------
;; Allow execution from system directories and detected package managers
(allow process-exec
  (subpath "/usr")                  ;; Standard Unix executables
  (subpath "/System")               ;; macOS system executables
  (subpath "/bin")                  ;; Essential system binaries
  (subpath "/sbin")                 ;; System administration binaries
  (literal "/usr/bin/env")          ;; Environment executable (shebangs)
__DETECTED_EXEC_PATHS__
)

;; ---------- Temporary Directories --------------------------------
;; Allow read/write access to system temp directories
(allow file-read* file-write*
  (subpath "/tmp")                  ;; System temp directory
  (regex "^/private/var/folders/.*/T/") ;; User-specific temp directories
)

;; ---------- Claude Configuration & Authentication -----------------
;; Claude-specific configuration and authentication token storage
(allow file-read* file-write*
  (subpath "__HOME__/.claude")      ;; Claude configuration directory
  (literal "__HOME__/.claude.json") ;; Claude settings file
)

;; ---------- System Preferences & Timezone (Read-Only) ------------
;; Required for proper timezone handling and system preference access
(allow file-read*
  (subpath "/private/var/db/timezone") ;; Timezone database
  (subpath "/Library/Preferences")     ;; System preference files
)

;; ---------- Device Access & I/O Control --------------------------
;; Terminal devices and system debugging tools
(allow file-read* (literal "/dev"))       ;; Device directory listing
(allow file-read* file-write*
  (regex "^/dev/(tty.*|null|zero|dtracehelper)") ;; TTY, null, zero devices
)
(allow file-ioctl
  (literal "/dev/dtracehelper")           ;; DTrace debugging helper
  (regex "^/dev/tty.*")                   ;; Terminal I/O control
)

;; ---------- System Service Communication (Mach IPC) --------------
;; Essential macOS system services required for basic functionality
(allow mach-lookup
  (global-name "com.apple.system.opendirectoryd.libinfo")      ;; Directory services
  (global-name "com.apple.SystemConfiguration.DNSConfiguration") ;; DNS configuration
  (global-name "com.apple.coreservices.launchservicesd")       ;; Launch services
  (global-name "com.apple.CoreServices.coreservicesd")         ;; Core services daemon
  (global-name "com.apple.system.notification_center")        ;; System notifications
  (global-name "com.apple.logd")                              ;; System logging
  (global-name "com.apple.diagnosticd")                       ;; System diagnostics
  (global-name "com.apple.lsd.mapdb")                         ;; Launch services database
  (global-name "com.apple.lsd.modifydb")                      ;; Launch services modification
  (global-name "com.apple.coreservices.quarantine-resolver")  ;; Quarantine management
)

;; ---------- Launch Services (File Opening Support) --------------
;; Required for /usr/bin/open and file association handling
(allow mach-lookup
  (regex "^com\\.apple\\.lsd(\\..*)?$") ;; Launch services daemon and helpers
)

;; ---------- Notification Center Shared Memory (Read-Only) -------
;; Required for system notification access
(allow ipc-posix-shm-read-data
  (ipc-posix-name "apple.shm.notification_center") ;; Notification shared memory
)

;; ---------- User Preferences (Read-Only) -------------------------
;; User-specific application preferences and settings
(allow file-read*
  (subpath "__HOME__/Library/Preferences") ;; User preference files
)

;; ---------- IDE & Development Tools Configuration (Read-Only) ----
;; Allow reading IDE settings for better development experience
(allow file-read*
  (subpath "__HOME__/Library/Application Support") ;; macOS app support files
  (subpath "__HOME__/.vscode")        ;; VS Code configuration
  (subpath "__HOME__/.cursor")        ;; Cursor IDE configuration
  (subpath "__HOME__/.vim")           ;; Vim configuration
  (subpath "__HOME__/.config")        ;; XDG config directory
)

;; ---------- SECURITY: System Protection (Deny Modifications) -----
;; Explicitly deny file modifications in critical system directories
;; This prevents accidental or malicious system file tampering
(deny file-write* file-write-create file-write-data file-write-mode
      file-write-owner file-write-times file-write-xattr file-unlink
  (subpath "/System")                  ;; macOS system files
  (subpath "/usr")                     ;; Unix system resources  
  (subpath "/bin")                     ;; Essential binaries
  (subpath "/sbin")                    ;; System administration binaries
  (subpath "/Library/Frameworks")      ;; System frameworks
  (subpath "/private/etc")             ;; System configuration
  (subpath "/var/db/dyld")             ;; Dynamic linker cache
  (subpath "/Library/Preferences")     ;; System preferences
  (subpath "/private/var/db/timezone") ;; Timezone database
)

;; ---------- SECURITY: Explicit Deny List -------------------------
;; Block access to sensitive personal directories and credentials
;; This provides defense-in-depth against data exfiltration
(deny file-read* file-write*
  ;; Personal document directories
  (subpath "__HOME__/Documents")      ;; Personal documents
  (subpath "__HOME__/Desktop")        ;; Desktop files
  (subpath "__HOME__/Downloads")      ;; Downloaded files
  (subpath "__HOME__/Pictures")       ;; Personal photos
  (subpath "__HOME__/Movies")         ;; Personal videos
  (subpath "__HOME__/Music")          ;; Personal audio files
  ;; Sensitive credential and configuration directories
  (regex "^__HOME__/\\.(ssh|aws|gnupg|kube|docker)($|/)")  ;; Credentials
  (subpath "__HOME__/.password-store") ;; Password store
  (subpath "__HOME__/.authinfo")      ;; Authentication info
  (subpath "__HOME__/.netrc")         ;; Network credentials
  (subpath "__HOME__/.pgpass")        ;; PostgreSQL passwords
  (subpath "__HOME__/.my.cnf")        ;; MySQL credentials
  (subpath "__HOME__/.s3cfg")         ;; S3 credentials
  (subpath "__HOME__/.boto")          ;; AWS boto config
  (subpath "__HOME__/.gcloud")        ;; Google Cloud credentials
  (subpath "__HOME__/.azure")         ;; Azure credentials
  (regex "^__HOME__/\\.*_history$")     ;; Shell history files
)

;; ---------- Project Workspace (Full Access) ----------------------
;; Grant complete access to the current project directory
(allow file-read* file-write* file-map-executable
  (subpath "__PROJECT_DIR__")         ;; Current project directory
)
(allow process-exec
  (subpath "__PROJECT_DIR__")         ;; Execute files in project
)

;; ---------- Network Access ----------------------------------------
;; SECURITY NOTICE: This profile allows all network access by design.
;; For production use, configure external firewall (Little Snitch, Lulu,
;; pfctl) to restrict connections to approved domains only:
;;   - api.anthropic.com (Claude API)
;;   - registry.npmjs.org (npm packages)
;;   - github.com/api.github.com (Git operations)
;;   - sentry.io (error reporting)
;;   - statsig.anthropic.com/statsig.com (analytics)

;; DNS resolution (required for any network connectivity)
(allow network-outbound
  (remote udp "*:53")                 ;; DNS over UDP
  (remote tcp "*:53")                 ;; DNS over TCP
)

;; Local development server access
(allow network*
  (remote ip "localhost:*")           ;; Localhost connections
)

;; Development server hosting
(allow network-inbound (local ip))    ;; Accept inbound connections

;; General internet access (configure external firewall for restrictions)
(allow network-outbound)              ;; All outbound connections

;; ---------- Process Management & File Operations -----------------
;; Essential process and file system operations
(allow process-fork)                   ;; Allow creating child processes
(allow lsopen)                         ;; Allow Launch Services file opening
EOF
}

replace_placeholders() {
  local project_dir="$1"
  local home_dir="$2"
  
  log "Replacing placeholders in profile..."
  /usr/bin/sed -i '' \
    -e "s|__PROJECT_DIR__|$project_dir|g" \
    -e "s|__HOME__|$home_dir|g" \
    "$PROFILE_FILE"
}

add_detected_paths() {
  local detected_paths=("$@")
  
  log "Adding ${#detected_paths[@]} detected paths..."
  for path in "${detected_paths[@]}"; do
    /usr/bin/sed -i '' "/__DETECTED_READ_PATHS__/i\\
  (subpath \"$path\")
" "$PROFILE_FILE"
    
    /usr/bin/sed -i '' "/__DETECTED_EXEC_PATHS__/i\\
  (subpath \"$path\")
" "$PROFILE_FILE"
    
    if [[ "$path" == *"/.local" ]]; then
      /usr/bin/sed -i '' "/__DETECTED_USER_PATHS__/i\\
(allow file-read*\\
  (subpath \"$path\")\\
)
" "$PROFILE_FILE"
    fi
  done
}

cleanup_placeholders() {
  log "Cleaning up placeholder markers..."
  /usr/bin/sed -i '' \
    -e "/__DETECTED_READ_PATHS__/d" \
    -e "/__DETECTED_USER_PATHS__/d" \
    -e "/__DETECTED_EXEC_PATHS__/d" \
    "$PROFILE_FILE"
  
  if ! grep -q "/.local" "$PROFILE_FILE"; then
    /usr/bin/sed -i '' '/^;; ---------- global npm\/pipx\/cargo bins/a\
;; No user package paths detected
' "$PROFILE_FILE"
  fi
}

generate_profile() {
  local project_dir="$(pwd -P)"
  local home_dir="$HOME"
  
  local detected_paths=()
  local temp_paths_file="$TMPDIR/.claudebox-temp-paths-$$"
  detect_package_paths > "$temp_paths_file"
  while IFS= read -r path; do
    [[ -n "$path" ]] && detected_paths+=("$path")
  done < "$temp_paths_file"
  rm -f "$temp_paths_file"
  
  create_base_profile
  replace_placeholders "$project_dir" "$home_dir"
  if [[ ${#detected_paths[@]} -gt 0 ]]; then
    add_detected_paths "${detected_paths[@]}"
  else
    log "No package paths detected"
  fi
  cleanup_placeholders
  
  log "Profile generated: $PROFILE_FILE"
}

validate_profile() {
  log "Validating sandbox profile..."
  
  # Check if profile file exists and is readable
  if [[ ! -r "$PROFILE_FILE" ]]; then
    error "Profile file not readable: $PROFILE_FILE"
    return 1
  fi
  
  # Basic syntax validation - check for required elements
  if ! grep -q "^(version 1)" "$PROFILE_FILE"; then
    error "Profile missing version declaration"
    return 1
  fi
  
  if ! grep -q "^(deny default)" "$PROFILE_FILE"; then
    error "Profile missing default deny policy"
    return 1
  fi
  
  # Try sandbox-exec validation if available and permitted
  if sandbox-exec -f "$PROFILE_FILE" true 2>/dev/null; then
    log "Profile validation passed (sandbox-exec test)"
  else
    local exit_code=$?
    if [[ $exit_code -eq 1 ]]; then
      error "Generated profile has syntax errors"
      return 1
    else
      log "Profile syntax appears valid (sandbox-exec unavailable due to permissions)"
    fi
  fi
  
  log "Profile validation completed"
  return 0
}

run_claude() {
  log "Starting run_claude function with args: $*"
  [ $# -gt 0 ] && shift
  log "After shifting, remaining args: $*"
  
  log "Loading configuration..."
  load_config
  log "Configuration loaded successfully"
  
  log "Validating environment..."
  validate_environment
  log "Environment validation completed"
  
  log "Generating sandbox profile..."
  generate_profile
  log "Profile generated successfully"
  
  log "Validating sandbox profile..."
  validate_profile || exit 1
  log "Profile validation completed"
  
  echo "â†’ Running Claude Code sandboxed in:  $PWD"
  echo "â†’ Profile: $PROFILE_FILE"
  [[ $VERBOSE -eq 1 ]] && echo "â†’ Ulimit processes: $ULIMIT_PROCESSES"
  
  if [[ $DRY_RUN -eq 1 ]]; then
    echo "â†’ DRY RUN: Would execute:"
    echo "  ulimit -u $ULIMIT_PROCESSES"
    echo "  sandbox-exec -f \"$PROFILE_FILE\" claude $*"
    echo "â†’ Profile contents:"
    cat "$PROFILE_FILE"
    return 0
  fi
  
  log "Setting ulimit and executing sandboxed claude..."
  ulimit -u "$ULIMIT_PROCESSES"
  exec sandbox-exec -f "$PROFILE_FILE" claude "$@"
}

cmd="${1:-run}"
log "Processing command: $cmd"

case "$cmd" in
  help|-h|--help) 
    log "Executing help command"
    usage 
    ;;
  run)
    log "Executing run command"
    run_claude "$@"
    ;;
  generate)
    log "Executing generate command"
    PRESERVE_PROFILE=1
    load_config
    validate_environment
    generate_profile
    echo "$PROFILE_FILE"
    ;;
  profile)
    log "Executing profile command"
    echo "$PROFILE_FILE"
    ;;
  validate)
    log "Executing validate command"
    PRESERVE_PROFILE=1
    load_config
    validate_environment
    generate_profile
    validate_profile
    echo "Profile is valid"
    ;;
  *)
    log "Unknown command: $cmd"
    echo "Unknown command: $cmd" >&2
    echo >&2
    usage >&2
    exit 1
    ;;
esac

log "Script completed successfully"